package letcode.tree;

/**
 * 完全平方数
 * 给定正整数 n，找到若干个完全平方数（比如 1, 4, 9, 16, ...）使得它们的和等于 n。你需要让组成和的完全平方数的个数最少。
 * <p>
 * 输入: n = 12
 * 输出: 3
 * 解释: 12 = 4 + 4 + 4.
 * <p>
 * 输入: n = 13
 * 输出: 2
 * 解释: 13 = 4 + 9.
 */
public class NumSquares {

    public int numSquares(int n) {
        int[] dp = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            dp[i] = i;
            for (int j = 1; i - j * j >= 0; j++) {
                dp[i] = Math.min(dp[i], dp[i - j * j] + 1); //和组合硬币一样，当前数等于前一个数+1；
            }
        }
        return dp[n];
    }

    /**
     * 1，对于正整数N, 所有的解都是 N = 一个整数的平方 + 另一个整数; 直白点, N = AxA + B
     * 2, 而B又是由 "一个整数的平方 + 另一个整数" 组成的; 那么, B = CxC + D
     * 3，总结下就是：N = IxI + N' 而 N' = IxI + N''
     *
     * 4, 本题要解的问题：正整数N最少由多个平方数相加;
     * 5, 那么，N的最优解 = 1 + （N’的最优解）。而N'肯定小于N。
     * 6, 所以本题的思路就是，对每一个N，观察1到N-1中，谁的解最小，那么N的解就是它+1.
     *
     * 7, 但是我们没必要1到N+1中的每一个数都去观察，因为有些组合不满足N = IxI + N'，譬如12 = 2+N'是不需要的，因为2不是某个数的平方。所以我们观察的范围要大大减小。
     *
     * 拿12举例,我们只能观察：
     * 12 = 1 + 11
     * 12 = 4 + 8
     * 12 = 9 + 3
     * 我们要得出3，8，11中谁的解最优，那么12的解就是它+1。
     *
     * 8, 我们从1到N计算, 2的解从1里找，3的解从[2,1]里找，4的解从[3,2,1]里找，依次类推，最后算到N的解即可。
     *
     */
}
